#XBee configuration
Zigbee Coordinator		(CE)	1
Devece Join Permit		(JN)	FF 
Zigbee Stack Profile	(ZS)	2
Encryption Enable		(EE)	1
Encryption Options		(EO)	0
Encryption Key			(KY)	5a6967426565416c6c69616e63653039
Network Encryption Key	(NK)	0
API Enable				(AP)	1
API Output Mode			(AO)	1



# First send a route record request so when the switch responds
# I can get the addresses out of it
print "Broadcasting route record request (cluster = \x00\x32)"
zb.send('tx_explicit',
	dest_addr_long = BROADCAST,
	dest_addr = UNKNOWN,
	src_endpoint = '\x00',
	dest_endpoint = '\x00',
	cluster = '\x00\x32',
	profile = '\x00\x00',
	data = '\x12'+'\x01'
)

print 'Report Switch Status'
zb.send('tx_explicit',
	dest_addr_long = switchLongAddr,
	dest_addr = switchShortAddr,
	src_endpoint = '\x00',
	dest_endpoint = '\x01',
	cluster = '\x00\x06', # cluster I want to deal with
	profile = '\x01\x04', # home automation profile
	data = '\x00'+'\xaa'+'\x00'+'\x00'+'\x00'
)

print 'Active Endpoint Request'
zb.send('tx_explicit',
	dest_addr_long = switchLongAddr,
	dest_addr = switchShortAddr,
	src_endpoint = '\x00',
	dest_endpoint = '\x00',
	cluster = '\x00\x05', # Active Endpoint Request
	profile = '\x00\x00', # home automation profile
	data = switchShortAddr[1]+switchShortAddr[0]
)

(clusterId == 0x8005):
# this is the Active Endpoint Response This message tells you
# what the device can do
print 'Active Endpoint Response'
printData(data)
if (ord(data['rf_data'][1]) == 0): # this means success
	print "Active Endpoint reported back is: {0:02x}".format(ord(data['rf_data'][5]))
print("Now trying simple descriptor request on endpoint 01")
zb.send('tx_explicit',
	dest_addr_long = data['source_addr_long'],
	dest_addr = data['source_addr'],
	src_endpoint = '\x00',
	dest_endpoint = '\x00', # This has to go to endpoint 0 !
	cluster = '\x00\x04', #simple descriptor request'
	profile = '\x00\x00',
	data = '\x13' + data['source_addr'][1] + data['source_addr'][0] + '\x01'
)
(clusterId == 0x8004):
	print "simple descriptor response"
	try:
		clustersFound = []
		r = data['rf_data']
		if (ord(r[1]) == 0): # means success
			#take apart the simple descriptor returned
			endpoint, profileId, deviceId, version, inCount = \
				unpack('<BHHBB',r[5:12])
			print "    endpoint reported is: {0:02x}".format(endpoint)
			print "    profile id:  {0:04x}".format(profileId)
			print "    device id: {0:04x}".format(deviceId)
			print "    device version: {0:02x}".format(version)
			print "    input cluster count: {0:02x}".format(inCount)
			position = 12
			# input cluster list (16 bit words)
			for x in range (0,inCount):
				thisOne, = unpack("<H",r[position : position+2])
				clustersFound.append(r[position+1] + r[position])
				position += 2
				print "        input cluster {0:04x}".format(thisOne)
			outCount, = unpack("<B",r[position])
			position += 1
			print "    output cluster count: {0:02x}".format(outCount)
			#output cluster list (16 bit words)
			for x in range (0,outCount):
				thisOne, = unpack("<H",r[position : position+2])
				clustersFound.append(r[position+1] + r[position])
				position += 2
				print "        output cluster {0:04x}".format(thisOne)
			clustersFound.append('\x0b\x04')
			print "added special cluster"
			print "Completed Cluster List"

	(clusterId == 0x0013):
	# This is the device announce message.
	print 'Device Announce Message'
	#printData(data)
	# This is a newly found device, so I'm going to tell it to 
	# report changes to the switch.  There are better ways of
	# doing this, but this is a test and demonstration
	print "sending 'configure reporting'"
	zb.send('tx_explicit',
		dest_addr_long = switchLongAddr,
		dest_addr = switchShortAddr,
		src_endpoint = '\x00',
		dest_endpoint = '\x01',
		cluster = '\x00\x01', # cluster I want to deal with
		profile = '\x01\x04', # home automation profile
		data = '\x00' + '\xaa' + '\x06' + '\x00' + '\x00' + '\x00' + '\x10' + '\x00' + '\x00' + '\x00' + '\x40' + '\x00' + '\x00'
	)
